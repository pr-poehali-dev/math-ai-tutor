'''
Business: AI-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ OpenAI
Args: event - dict —Å httpMethod, body (user_id, message)
Returns: HTTP response —Å –æ—Ç–≤–µ—Ç–æ–º AI
'''
import json
import os
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    body_data = json.loads(event.get('body', '{}'))
    user_message: str = body_data.get('message', '')
    user_id: int = body_data.get('user_id', 1)
    
    if not user_message:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Message is required'}),
            'isBase64Encoded': False
        }
    
    try:
        import openai
        
        openai.api_key = os.environ.get('OPENAI_API_KEY')
        
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": """–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –î–∞–≤–∞—Ç—å –ü–û–®–ê–ì–û–í–´–ï –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—ã
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫ –∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏
3. –†–∞–∑–±–∏–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏
4. –ü–æ–¥–±–∞–¥—Ä–∏–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
5. –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –æ—à–∏–±—Å—è ‚Äî –æ–±—ä—è—Å–Ω–∏—Ç—å, –≥–¥–µ –∏ –ø–æ—á–µ–º—É
6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —à–∞–≥–æ–≤

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
**–®–∞–≥ 1:** [–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]
**–®–∞–≥ 2:** [–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]
**–û—Ç–≤–µ—Ç:** [—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç]

–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º —É—á–∏—Ç–µ–ª–µ–º!"""
                },
                {
                    "role": "user",
                    "content": user_message
                }
            ],
            max_tokens=800,
            temperature=0.7
        )
        
        ai_response = response.choices[0].message.content
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'response': ai_response,
                'user_id': user_id
            }),
            'isBase64Encoded': False
        }
        
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'error': f'AI error: {str(e)}',
                'fallback_response': '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º:\n\n**–®–∞–≥ 1:** –û–ø—Ä–µ–¥–µ–ª–∏–º, —á—Ç–æ –Ω–∞–º –¥–∞–Ω–æ\n**–®–∞–≥ 2:** –í—ã–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è\n**–®–∞–≥ 3:** –ü—Ä–∏–º–µ–Ω–∏–º —Ñ–æ—Ä–º—É–ª—É –∏ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç\n\nüí° –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å –ª—É—á—à–µ!'
            }),
            'isBase64Encoded': False
        }
